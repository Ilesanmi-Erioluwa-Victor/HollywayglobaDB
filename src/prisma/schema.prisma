// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id                              String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                            String
  email                           String                    @unique
  password                        String
  role                            Role                      @default(MODERATOR)
  AdminPasswordResetToken         AdminPasswordResetToken[]
  isAccountVerified               Boolean                   @default(false)
  accountVerificationToken        String?                   @default("")
  accountVerificationTokenExpires DateTime?                 @default(now())
  createdAt                       DateTime                  @default(now())
  updatedAt                       DateTime                  @updatedAt
  v                               Int?                      @map("__v")
}

enum Role {
  ADMIN
  MODERATOR
}

model AdminPasswordResetToken {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  token          String   @unique @default("")
  expirationTime DateTime
  adminId        String   @db.ObjectId
  admin          Admin    @relation(fields: [adminId], references: [id])
}

model User {
  id                              String               @id @default(auto()) @map("_id") @db.ObjectId
  firstName                       String
  lastName                        String
  email                           String               @unique
  mobile                          String               @unique
  password                        String
  isBlocked                       Boolean              @default(false)
  address                         Address[]
  wishlist                        WishList[]
  role                            String?              @default("user")
  active                          Boolean              @default(true)
  profilePhoto                    String               @default("https://cdn.pixabay.com/photo/2021/07/02/04/48/user-6380868_1280.png")
  isAccountVerified               Boolean              @default(false)
  accountVerificationToken        String?              @default("")
  accountVerificationTokenExpires DateTime?            @default(now())
  createdAt                       DateTime             @default(now())
  updatedAt                       DateTime             @updatedAt
  v                               Int?                 @map("__v")
  passwordresettoken              PasswordResetToken[]
  payment                         Payment?
}

model Address {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  user            User    @relation(fields: [userId], references: [id])
  userId          String  @db.ObjectId
  deliveryAddress String?
  additionalInfo  String?
  region          String?
  city            String?
  phone           String?
  additionalPhone String?
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  // admin       Admin    @relation(fields: [adminId], references: [id])
  // adminId     String   @db.ObjectId
  title       String
  slug        String   @unique
  description String
  price       Int
  category    String
  quantity    Int
  images      String[]
  brand       String
  sold        Int      @default(0)
  color       String
  ratings     Rating?
}

model Rating {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  star      Int     @default(0)
  productId String  @unique @db.ObjectId
}

model WishList {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model PasswordResetToken {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  token          String   @unique @default("")
  expirationTime DateTime
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
}

model Payment {
  userId       String @db.ObjectId @unique
  user         User   @relation(fields: [userId], references: [id])
  payment_type String 
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  card_number  Int
  card_expiry_date DateTime
  card_cvv    Int
  card_holder_name String
}
