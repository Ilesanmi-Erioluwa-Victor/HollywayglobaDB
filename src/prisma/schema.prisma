// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Admin {
  id                              String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                            String
  email                           String                    @unique
  password                        String
  role                            Role                      @default(MODERATOR)
  AdminPasswordResetToken         AdminPasswordResetToken[]
  category                        Category[]
  isAccountVerified               Boolean                   @default(false)
  accountVerificationToken        String?                   @default("")
  accountVerificationTokenExpires DateTime?                 @default(now())
  createdAt                       DateTime                  @default(now())
  updatedAt                       DateTime                  @updatedAt
  v                               Int?                      @map("__v")
  Product                         Product[]
}

enum Role {
  ADMIN
  MODERATOR
}

model AdminPasswordResetToken {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  token          String   @unique @default("")
  expirationTime DateTime
  adminId        String   @db.ObjectId
  admin          Admin    @relation(fields: [adminId], references: [id])
}

model User {
  id                              String               @id @default(auto()) @map("_id") @db.ObjectId
  firstName                       String
  lastName                        String
  email                           String               @unique
  mobile                          String               @unique
  password                        String
  isBlocked                       Boolean              @default(false)
  address                         Address[]
  role                            String?              @default("user")
  active                          Boolean              @default(true)
  profilePhoto                    String               @default("https://cdn.pixabay.com/photo/2021/07/02/04/48/user-6380868_1280.png")
  isAccountVerified               Boolean              @default(false)
  accountVerificationToken        String?              @default("")
  accountVerificationTokenExpires DateTime?            @default(now())
  createdAt                       DateTime             @default(now())
  updatedAt                       DateTime             @updatedAt
  v                               Int?                 @map("__v")
  passwordresettoken              PasswordResetToken[]
  payment                         Payment?
  ProductWishList                 ProductWishList[]
}

model Address {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  user            User    @relation(fields: [userId], references: [id])
  userId          String  @db.ObjectId
  deliveryAddress String?
  additionalInfo  String?
  region          String?
  city            String?
  phone           String?
  additionalPhone String?
}

model Product {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  slug            String?
  description     String
  price           Int?
  category        Category          @relation(fields: [categoryId], references: [id])
  quantity        Int?
  images          String[]
  brand           Brand             @default(FOOD)
  stock           Int?              @default(0)
  colors          String?
  reviews         Review[]
  ProductWishList ProductWishList[]
  categoryId      String            @db.ObjectId
  admin           Admin             @relation(fields: [adminId], references: [id])
  adminId         String            @db.ObjectId
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

enum Brand {
  FOOD
  NIKE
  APPLE
  COCACOLA
  PUMA
  SAMSUNG
  PHILIPS
  LENOVO
  NOKIA
  TECNO
  INFINIX
  REDMI
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  rating    Float // Rating value (e.g., 4.5)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
}

model ProductWishList {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  product    Product @relation(fields: [productId], references: [id])
  productId  String  @db.ObjectId
  user       User    @relation(fields: [userId], references: [id])
  wishListId String  @db.ObjectId
  userId     String  @db.ObjectId
  quantity    Int
}

model PasswordResetToken {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  token          String   @unique @default("")
  expirationTime DateTime
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
}

model Payment {
  userId         String   @unique @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  paymenType     String
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  cardNnumber    Int
  cardExpiryDate DateTime
  cardCvv        Int
  cardHolderName String
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  products Product[]
  name     String
  admin    Admin     @relation(fields: [adminId], references: [id])
  adminId  String    @db.ObjectId
}
