// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL_DEV")
}

model Admin {
  id                              String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                            String
  email                           String                    @unique
  password                        String
  role                            Role                      @default(MODERATOR)
  AdminPasswordResetToken         AdminPasswordResetToken[]
  category                        Category[]
  isAccountVerified               Boolean                   @default(false)
  accountVerificationToken        String?                   @default("")
  accountVerificationTokenExpires DateTime?                 @default(now())
  Product                         Product[]
  createdAt                       DateTime                  @default(now())
  updatedAt                       DateTime                  @updatedAt
  v                               Int?                      @map("__v")
}

model AdminPasswordResetToken {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  token          String   @unique @default("")
  expirationTime DateTime
  adminId        String   @db.ObjectId
  admin          Admin    @relation(fields: [adminId], references: [id])
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  products Product[]
  name     String    @unique
  admin    Admin     @relation(fields: [adminId], references: [id])
  adminId  String    @db.ObjectId
}

enum Role {
  ADMIN
  MODERATOR
}

model User {
  id                              String               @id @default(auto()) @map("_id") @db.ObjectId
  firstName                       String
  lastName                        String
  email                           String               @unique
  mobile                          String               @unique
  password                        String
  isBlocked                       Boolean              @default(false)
  address                         Address[]
  role                            String?              @default("user")
  reviews                         Review[]
  active                          Boolean              @default(true)
  profilePhoto                    String               @default("https://cdn.pixabay.com/photo/2021/07/02/04/48/user-6380868_1280.png")
  isAccountVerified               Boolean              @default(false)
  accountVerificationToken        String?              @default("")
  accountVerificationTokenExpires DateTime?            @default(now())
  deleteRequestDate               DateTime?
  loggedInAfterRequest            Boolean              @default(false)
  passwordresettoken              PasswordResetToken[]
  payment                         paymentMethod?
  orders                          Order[]
  createdAt                       DateTime             @default(now())
  updatedAt                       DateTime             @updatedAt
  v                               Int?                 @map("__v")
  Cart                            Cart[]
}

model PasswordResetToken {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  token          String   @unique @default("")
  expirationTime DateTime
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
}

model Product {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String?
  description String
  price       Int        @default(1500)
  category    Category   @relation(fields: [categoryId], references: [id])
  quantity    Int        @default(100)
  images      String[]
  brand       Brand      @default(FOOD)
  stock       Int        @default(1)
  isAvailable Boolean    @default(true)
  colors      String     @default("white")
  reviews     Review[]
  categoryId  String     @db.ObjectId
  admin       Admin      @relation(fields: [adminId], references: [id])
  adminId     String     @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  CartItem    CartItem[]
  OrderItem   OrderItem?
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  rating    Float
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @db.ObjectId
  deliveryAddress String?
  additionalInfo  String?
  region          String?
  city            String?
  country         String?
  phone           String?
  isDefault       Boolean? @default(false)
  additionalPhone String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Order           Order[]
}

enum Brand {
  FOOD
  NIKE
  APPLE
  COCACOLA
  PUMA
  SAMSUNG
  PHILIPS
  LENOVO
  NOKIA
  TECNO
  INFINIX
  REDMI
}

model Cart {
  id     String     @id @default(auto()) @map("_id") @db.ObjectId
  userId String     @db.ObjectId
  user   User       @relation(fields: [userId], references: [id])
  items  CartItem[]
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id])
  quantity  Int     @default(0)
}

model Order {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  userId             String         @db.ObjectId
  user               User           @relation(fields: [userId], references: [id])
  shipping_address   Address        @relation(fields: [shipping_addressId], references: [id])
  shipping_addressId String         @db.ObjectId
  shipping_method    ShippingMethod @relation(fields: [shipping_methodId], references: [id])
  shipping_methodId  String         @db.ObjectId
  total_amount       Float
  order_items        OrderItem[]
  order_status       ORDER_STATUS   @default(PENDING)
  payment_methodId   String         @db.ObjectId
  payment_method     paymentMethod  @relation(fields: [payment_methodId], references: [id])
  order_date         DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

enum ORDER_STATUS {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
}

model ShippingMethod {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float

  orders Order[]
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @unique @db.ObjectId
  order     Order    @relation(fields: [orderId], references: [id])
  productId String   @unique @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model paymentMethod {
 id               String     @id @default(auto()) @map("_id") @db.ObjectId
  userId           String     @db.ObjectId @unique
  user             User       @relation(fields: [userId], references: [id])
  cardholderName   String     
  cardNumber       String     
  expirationDate   String     
  cvv              String      
  totalAmount      Float      
  orders           Order[]
}
